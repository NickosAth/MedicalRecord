@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html>
<head>
	<title>Προσωπικά στοιχεία ασθενούς</title>
	<style>
		* {
			box-sizing: border-box;
			font-family: Arial, sans-serif;
		}

		body {
			background-image: url('https://plus.unsplash.com/premium_photo-1658506952749-8df0057c5c03?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTl8fGhvc3BpdGFsfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60');
			background-size: cover;
			background-position: center center;
			font-family: 'Open Sans', sans-serif;
		}

		.container::before {
			content: "";
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			z-index: -1;
			background-image: url('https://plus.unsplash.com/premium_photo-1658506952749-8df0057c5c03?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTl8fGhvc3BpdGFsfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60');
			background-size: cover;
			background-position: center center;
			filter: blur(20px);
			background-attachment: fixed; /* Fixed background image */
		}
		
		form {
			max-width: 500px;
			margin: 0 auto;
			padding: 20px;
			background-color: #f2f2f2;
			border-radius: 5px;
			border: 1px solid #ccc;
		}

		h2 {
			text-align: center;
			font-weight: bold;
			color: #333;
			margin-top: 50px;
			background-image: url('https://images.unsplash.com/photo-1572541077501-c74b82f43b19');
			background-size: cover;
			background-position: center center;
			padding: 30px;
			border-radius: 10px;
			box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.2);
			text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
		}

		label {
			display: block;
			font-weight: bold;
			margin-top: 10px;
		}

		input[type="text"], select {
			width: 100%;
			padding: 12px;
			border: 1px solid #ccc;
			border-radius: 4px;
			resize: vertical;
			font-size: 16px;
			background-color: #fff;
		}

		input[type="submit"] {
			background-color: #4CAF50;
			color: #fff;
			padding: 12px 20px;
			border: none;
			border-radius: 4px;
			cursor: pointer;
			font-size: 16px;
		}

			input[type="submit"]:hover {
				background-color: #45a049;
			}

		.container {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
		}

		.col-25 {
			flex: 25%;
			max-width: 100%;
		}

		.col-50 {
			flex: 50%;
			max-width: 100%;
		}

		.col-75 {
			flex: 75%;
			max-width: 100%;
		}


		.col-25,
		.col-50,
		.col-75 {
			padding: 0 20px;
			margin-bottom: 10px;
		}
		 .error-message {
            color: red;
            font-size: 12px;
            margin-top: 5px;
        }
	</style>
</head>
<body>
	<h2>Προσωπικά στοιχεία ασθενούς</h2>
	<div class="container">
	</div>
	<form id="patientForm" method="post" action="@Url.Action("Create", "CreateClient")">
		<div class="form-group">
			<label for="first_name">Όνομα:</label>
			<input type="text" class="form-control" id="first_name" name="FirstName" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
			<label for="last_name">Επώνυμο:</label>
			<input type="text" class="form-control" id="last_name" name="LastName" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
			<label for="father_name">Πατρώνυμο:</label>
			<input type="text" class="form-control" id="father_name" name="FathersName" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
			<label for="gender">Φύλο:</label>
			<select class="form-control" id="gender" name="Gender" required>
				<option value="Άνδρας">Άνδρας</option>
				<option value="Γυναίκα">Γυναίκα</option>
			</select>
		</div>
		<div class="form-group">
			<label for="birth_date">Ημερομηνία Γέννησης:</label>
			<input type="date" class="form-control" id="birth_date" name="Dob" required>
		</div>
		<div class="form-group">
			<label for="amka">Α.Μ.Κ.Α. (11 αριθμοί):</label>
			<input type="text" class="form-control" id="amka" name="Amka" required>
			<div class="error-message" id="amka-error"></div>
		</div>
		<div class="form-group">
			<label for="work">Επάγγελμα:</label>
			<input type="text" class="form-control" id="work" name="Job" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
			<label for="insurance_fund">Ταμείο:</label>
			<select class="form-control" id="insurance_fund" name="Insurance" required>
				<option value="Ι.Κ.Α.">Ι.Κ.Α.</option>
				<option value="Ο.Γ.Α.">Ο.Γ.Α.</option>
				<option value="Τ.Ε.Β.Ε.">Τ.Ε.Β.Ε.</option>
				<option value="Ο.Α.Ε.Ε.">Ο.Α.Ε.Ε.</option>
				<option value="Ο.Α.Ε.Κ.">Ο.Α.Ε.Κ.</option>
			</select>
		</div>
		<div class="form-group">
			<label for="marital_status">Οικογενειακή Κατάσταση:</label>
			<select class="form-control" id="marital_status" name="FamilyStatus" required>
				<option value="Άγαμος/η">Άγαμος/η</option>
				<option value="Παντρεμένος/η">Παντρεμένος/η</option>
				<option value="Διαζευγμένος/η">Διαζευγμένος/η</option>
				<option value="Χήρος/α">Χήρος/α</option>
			</select>
		</div>
		<div class="form-group">
			<label for="phone_number">Τηλέφωνο (10 αριθμοί):</label>
			<input type="text" class="form-control" id="phone_number" name="Phone" required>
			<div class="error-message" id="phone_number-error"></div>
		</div>
		<div class="form-group">
			<label for="email">Email:</label>
			<input type="email" class="form-control" id="email" name="Email" required>
			<div class="error-message" id="email-error"></div>
		</div>
		<div class="form-group">
			<label for="area_of_residence">Περιοχή Κατοικίας:</label>
			<input type="text" class="form-control" id="area_of_residence" name="AreaOfResidence" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
			<label for="city_of_residence">Πόλη Κατοικίας:</label>
			<input type="text" class="form-control" id="city_of_residence" name="CityOfResidence" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
			<label for="address_of_residence">Διεύθυνση Κατοικίας:</label>
			<input type="text" class="form-control" id="address_of_residence" name="AddressOfResidence" required oninput="validateGreekInput(this)">
		</div>
		<div class="form-group">
            <label for="zip_code">ΤΚ Κατοικίας (5 αριθμοί):</label>
            <input type="text" class="form-control" id="zip_code" name="ZipCodeOfResidence" required>
            <div class="error-message" id="zip_code-error"></div>
        </div>
		
		@*submit button*@
		<div class="form-group text-center mt-4">
			<button id="submitBtn" type="submit" class="btn btn-danger" disabled>Εγγραφή</button>
		</div>
	</form>
		@*sucess message*@
	<div id="success-message" style="display: none; text-align: center; color: black;">
		Επιτυχής εγγραφή! Παρακαλώ περιμένετε...
	</div>

</body>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Function to validate Greek input
    function validateGreekInput(inputElement) {
        var greekPattern = /^[Α-Ωα-ωίϊΐόάέύϋΰήώ\s]*$/;
        var inputValue = inputElement.value;

        if (!greekPattern.test(inputValue) && inputValue.trim() !== "") {
            alert("Επιτρέπονται μόνο ελληνικοί χαρακτήρες σε αυτό το πεδίο.");
            inputElement.value = inputValue.replace(/[^Α-Ωα-ωίϊΐόάέύϋΰήώ\s]/g, '');
        }
    }

	// Function to allow only numbers in the phone number input
	function allowOnlyNumbers(inputElement) {
		inputElement.value = inputElement.value.replace(/[^0-9]/g, '');
	}

	// Attach the allowOnlyNumbers function to the phone number input's oninput event
	document.getElementById('phone_number').addEventListener('input', function () {
		allowOnlyNumbers(this);
	});

    // Function to validate Zip Code
    function validateZipCode(inputElement) {
        var zipCodePattern = /^[0-9]{5}$/;
        var inputValue = inputElement.value;

        if (!zipCodePattern.test(inputValue)) {
            document.getElementById("zip_code-error").textContent = "Ο ταχυδρομικός κώδικας πρέπει να έχει 5 αριθμούς.";
        } else {
            document.getElementById("zip_code-error").textContent = "";
        }
    }
	// Function to validate AMKA
	function validateAmka(inputElement) {
		var amkaPattern = /^[0-9]{11}$/;
		var inputValue = inputElement.value;

		if (!amkaPattern.test(inputValue)) {
			document.getElementById("amka-error").textContent = "Το Α.Μ.Κ.Α. πρέπει να έχει 11 αριθμούς.";
		} else {
			// Clear the error message when the input is valid
			document.getElementById("amka-error").textContent = "";
		}
	}

	// Function to validate Phone Number
	function validatePhoneNumber(inputElement) {
		var phonePattern = /^[0-9]{10}$/;
		var inputValue = inputElement.value;

		if (!phonePattern.test(inputValue)) {
			document.getElementById("phone_number-error").textContent = "Το τηλέφωνο πρέπει να έχει 10 αριθμούς.";
		} else {
			// Clear the error message when the input is valid
			document.getElementById("phone_number-error").textContent = "";
		}
	}

	// Function to validate Email
	function validateEmail(inputElement) {
		var emailPattern = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
		var inputValue = inputElement.value;

		if (!emailPattern.test(inputValue)) {
			document.getElementById("email-error").textContent = "Το email δεν είναι έγκυρο.";
		} else {
			// Clear the error message when the input is valid
			document.getElementById("email-error").textContent = "";
		}
	}

	// Function to check if all fields are valid and fulfilled before submitting the form
	function isFormValid() {
		var hasErrors = false;

		// Check if any error messages are displayed
		$('.error-message').each(function () {
			if ($(this).text().trim() !== '') {
				hasErrors = true;
				return false; // Exit the loop early
			}
		});

		// Check if any of the input fields are empty
		$('input[type="text"], input[type="date"], select').each(function () {
			if ($(this).val() === '') {
				hasErrors = true;
				return false; // Exit the loop early
			}
		});

		// Check uniqueness of AMKA, Phone, and Email fields
		var amkaValue = $('#amka').val();
		var phoneValue = $('#phone_number').val();
		var emailValue = $('#email').val();
		var amkaCheckComplete = false;
		var phoneCheckComplete = false;
		var emailCheckComplete = false;

		// Function to handle enabling the submit button when all checks are complete
		function checkAllComplete() {
			if (amkaCheckComplete && phoneCheckComplete && emailCheckComplete) {
				updateRegisterButton();
			}
		}

		$.ajax({
			url: '/CreateClient/Amka',
			type: 'GET',
			data: { value: amkaValue },
			async: true, // Make the request asynchronous
			success: function (result) {
				if (result.exists) {
					$('#amka-error').text('Ο αριθμός AMKA υπάρχει ήδη.');
					hasErrors = true;
				}
				amkaCheckComplete = true;
				checkAllComplete();
			}
		});

		$.ajax({
			url: '/CreateClient/Phone',
			type: 'GET',
			data: { value: phoneValue },
			async: true, // Make the request asynchronous
			success: function (result) {
				if (result.exists) {
					$('#phone_number-error').text('Ο αριθμός τηλεφώνου υπάρχει ήδη.');
					hasErrors = true;
				}
				phoneCheckComplete = true;
				checkAllComplete();
			}
		});

		$.ajax({
			url: '/CreateClient/Email',
			type: 'GET',
			data: { value: emailValue },
			async: true, // Make the request asynchronous
			success: function (result) {
				if (result.exists) {
					$('#email-error').text('Το email υπάρχει ήδη.');
					hasErrors = true;
				}
				emailCheckComplete = true;
				checkAllComplete();
			}
		});

		return !hasErrors;
	}

    // Function to enable/disable Register button based on form validity
    function updateRegisterButton() {
        if (isFormValid()) {
            $('#submitBtn').prop('disabled', false);
        } else {
            $('#submitBtn').prop('disabled', true);
        }
    }

    // Attach the validation functions to the corresponding input elements
    $('#zip_code').on('input', function () {
        validateZipCode(this);
        updateRegisterButton();
    });

    $('#amka').on('input', function () {
        validateAmka(this);
        updateRegisterButton();
    });

    $('#phone_number').on('input', function () {
        validatePhoneNumber(this);
        updateRegisterButton();
    });

    $('#email').on('input', function () {
        validateEmail(this);
        updateRegisterButton();
    });

	// Function to hide the form and heading after successful registration
	function hideFormAndHeading() {
		$('#patientForm').hide();
		$('h2').hide();
	}

	// Attach the form submission function to the Register button
	$('#patientForm').submit(function (e) {
		e.preventDefault(); // Prevent the default form submission

		// Check if all fields are valid before submitting
		if (isFormValid()) {
			// Assuming your AJAX request to create a client is correct

			// Add the client to the database
			$.ajax({
				url: '/CreateClient/Create',
				type: 'POST',
				data: $('#patientForm').serialize(),
				success: function (result) {
					$('#success-message').show();

					// Hide the form and heading
					hideFormAndHeading();

					// Use setTimeout to delay the redirection
					setTimeout(function () {
						window.location.href = '@Url.Action("Index", "ShowClients")'; // Redirect after 3 seconds
					}, 3000); // Wait for 3 seconds before redirecting
				},
				error: function () {
					// Handle any errors if the client creation fails
				}
			});
		}
	});

    // Initialize the Register button state
    updateRegisterButton();
</script>


</html>